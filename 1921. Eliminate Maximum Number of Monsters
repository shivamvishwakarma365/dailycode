class Solution {
public:
    int eliminateMaximum(vector<int>& dist, vector<int>& speed) {
        //greedy approach
             vector<double> time;
        int n = dist.size();
        for(int i = 0; i < n; i++)
        {
            time.push_back((double)dist[i]/speed[i]);
        }
        sort(time.begin(), time.end());
        int ans=0;
        for(int i = 0; i <time.size(); i++)
        {
            if(i < time[i])
            {
                continue;
                
            }
            else
                return i;
        }
        return time.size();
        
    }
};
//python
class Solution:
    def eliminateMaximum(self, dist: List[int], speed: List[int]) -> int:
        minreach=[]
        for d,s in zip(dist,speed):
            minute=math.ceil(d/s)
            minreach.append(minute)
        minreach.sort()
        res=0
        for minute in range(len(minreach)):
            if(minute>=minreach[minute]):
                return res
            res +=1
        return res
