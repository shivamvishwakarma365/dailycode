class Solution {
public:
    string minWindow(string s, string t) {
        int i=0;
        int j=0;
        string result="-1";
        int start=0;
        int len=INT_MAX;
        unordered_map<char,int>mp;
        for(int i=0;i<t.length();i++){
            mp[t[i]]++;
        }
        int count=mp.size();
        while(j<s.length()){
            if(mp.find(s[j])!=mp.end()){
                mp[s[j]]--;
                if(mp[s[j]]==0){
                    count--;
                }
            }
            if(count>0){
                j++;
            }else if(count==0){
                if(j-i+1<len){
                    len=min(len,j-i+1);
                    start=i;
                    result=s.substr(i,len);
                }
                //for better options means lesser size options
                while(count==0){
                    if(mp.find(s[i])==mp.end()){
                        i++;
                        if(j-i+1<len){
                            len=min(len,j-i+1);
                            start=i;
                            result=s.substr(i,len);
                        }
                    }else{
                        mp[s[i]]++;
                        if(mp[s[i]]==1){
                            i++;
                            count++;
                        }else{
                            i++;
                            if(j-i+1<len){
                            len=min(len,j-i+1);
                            start=i;
                            result=s.substr(i,len);
                        }
                            
                        }
                    }
                }
                j++;
            }
            
        }
        return (len==INT_MAX?"":result);
    }
};
