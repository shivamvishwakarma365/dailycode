class Solution {
public:
    string decodeString(string s) {
        stack<int>numbers;
        stack<string>characters;
        string res;
        //this can be done using one stack or  and recursive approach
        int num=0;
        for(char c:s){
            if(isdigit(c)){
                num=num*10+(c-'0');
            }else if(isalpha(c)){
                res+=c;
            }else if(c=='['){
                characters.push(res);
                numbers.push(num);
                num=0;
                res="";
                
            }else if(c==']'){
                string temp=res;
                for(int i=0;i<numbers.top()-1;++i){
                    res+=temp;
                }
                res=characters.top()+res;
                characters.pop();
                numbers.pop();
            }
        }
        return res;
        
    }
};
//can be done using recursion too
class Solution {
public:
    string decodeString(string s) {
        int pos = 0;
        return helper(pos, s);
    }
    
    string helper(int& pos, string s) {
        int num=0;
        string word = "";
        for(;pos<s.size(); pos++) {
            char cur = s[pos];
            if(cur == '[') {
                string curStr = helper(++pos, s);
                for(;num>0;num--) word += curStr;
            } else if (cur >= '0' && cur <='9') {
                num = num*10 + cur - '0';
            } else if (cur == ']') {
                return word;
            } else {    // Normal characters
                word += cur;
            }
        }
        return word;
    }
};
