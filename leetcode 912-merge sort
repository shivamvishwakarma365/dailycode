 void merge(vector<int>&arr, int s, int mid, int e)
    {
     
    int length1=mid-s+1;
    int length2=e-mid;
    //dynamic array
    int *first=new int[length1];
    int *second=new int[length2];
    int mainarrayindex=s;
    //copying the values
    for(int i=0;i<length1;i++){
        first[i]=arr[mainarrayindex++];
    }
    mainarrayindex=mid+1;
    //copying the values
    for(int i=0;i<length2;i++){
        second[i]=arr[mainarrayindex++];
    }
    //merge two sorted arrays
    int index1=0;
    int index2=0;
    mainarrayindex=s;
    
    while(index1<length1 && index2<length2){
        if(first[index1]<second[index2]){
            arr[mainarrayindex++]=first[index1++];
            
        }else{
            arr[mainarrayindex++]=second[index2++];
        }
    }
    while(index1 < length1) {
        arr[mainarrayindex++] = first[index1++];
    }

    while(index2 < length2 ) {
        arr[mainarrayindex++] = second[index2++];
    }
    }
    public:
    void mergeSort(vector<int>&arr, int s, int e)
    {
        if(s>=e){
        return;
    }
    int mid=(s+e)/2;
    //to sort the left part
    mergeSort(arr,s,mid);
    //to sort the right part
    mergeSort(arr,mid+1,e);
    //to merge
    
    merge(arr,s,mid,e);
    }
