class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        //naive approach using two arrays as prefix and postfix
        //this uses extra memory
        //we can do it in the place itself
       /* 
        int n=nums.size();
        int prefix[n];
        int postfix[n];
        vector<int>ans(n,0);
        prefix[0]=nums[0];
        postfix[n-1]=nums[n-1];
        for(int i=1;i<n;i++){
            prefix[i]=nums[i]*prefix[i-1];
        }
       for(int i:prefix){
           cout<<i<<" ";
       }
       for(int i=n-2;i>=0;i--){
           postfix[i]=nums[i]*postfix[i+1];
       }
       cout<<endl;
       for(int i:postfix){
           cout<<i<<" ";
       }
       for(int i=1;i<n-1;i++){
           ans[i]=prefix[i-1]*postfix[i+1];
       }
       cout<<endl;
       ans[0]=postfix[1];
       ans[n-1]=prefix[n-2];
      for(int i:ans){
          cout<<i<<" ";
      }
        return ans;
        */
    //best apporach,this dosent take any memory as per the conditions
    int n=nums.size();
    int prefix=1;
    int postfix=1;
    vector<int>ans(n,0);
    for(int i=0;i<n;i++){
        ans[i]=prefix;
        prefix=prefix*nums[i];
    }
    for(int i=n-1;i>=0;i--){
        ans[i]=ans[i]*postfix;
        postfix=postfix*nums[i];
    }
    for(int i:ans){
        cout<<i<<" ";
    }
        return ans;
}
    
};
