class Solution {
public:
    
    
    int answer(vector<int>& nums){
        //using stack
        //using vector as a stack
        vector<int>stack;
          int n=nums.size();
        int low=n-1;
        int high=0;
        for(int i=0;i<n;i++){
            while(!stack.empty() && nums[stack.back()]>nums[i]){
                low=stack.back()<low?stack.back():low;
                stack.pop_back();
            }
            stack.push_back(i);
        }
        stack.clear();
        for(int i=n-1;i>=0;i--){
            while(!stack.empty() && nums[stack.back()]<nums[i]){
                high=stack.back()>high?stack.back():high;
                stack.pop_back();
            }
            stack.push_back(i);
        }
        if(low==n-1 && high==0)return 0;
        
        return high-low+1;
        
        
    }
    int findUnsortedSubarray(vector<int>& nums) {
        //simple method
       int n=nums.size();
        int low=0;
        int high=n-1;
        while(low+1<n && nums[low]<=nums[low+1])low++;
        while(high-1>=0 && nums[high]>=nums[high-1])high--;
        if(low==n-1)return 0;
        int maxnum=INT_MIN;
        int minnum=INT_MAX;
        for(int i=low;i<=high;i++){
            maxnum=max(maxnum,nums[i]);
            minnum=min(minnum,nums[i]);
        }
        //this part is done for the edge test case like
        //4,6,1,2,5,8,3,7
        while(low-1>=0 && nums[low-1]>minnum)low--;
        while(high+1<n && nums[high+1]<maxnum)high++;
       return answer(nums);
        return high-low+1;
        
    }
    
};
